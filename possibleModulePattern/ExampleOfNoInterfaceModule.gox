package modules

import (
	"net/http"
	"strings"

	"github.com/elastic/go-elasticsearch/v7"
)

// ESConfig : Is a configuration struct for Elastic Search
type ESConfig struct {
	Addresses    []string
	Username     string
	Password     string
	Transport    *http.Transport
	IndexName    string
	LogIndexName string
}

// ESInit : An interface holding the a method ( InitES() ) which returns a *ESClient
type ESInit interface {
	InitES() (*ESClient, error)
}

// ESClient : Holds an Elastic Search Client
type ESClient struct {
	Client elasticsearch.Client
}

var indexName string
var logIndexName string

// InitializeES : Initializes an Elastic Search adaptor
func InitializeES(init ESInit) (*ESClient, error) {

	es, err := init.InitES()

	if err != nil {
		L.Error.Println("Error initializing Elastic Search", err)
	}

	return es, nil
}

// InitES : Returns an initialized Elastic Search Client
func (cfg *ESConfig) InitES() (*ESClient, error) {
	esCfg := elasticsearch.Config{
		Addresses: cfg.Addresses,
		Username:  cfg.Username,
		Password:  cfg.Password,
		Transport: cfg.Transport,
	}
	indexName = cfg.IndexName
	logIndexName = cfg.LogIndexName
	es, err := elasticsearch.NewClient(esCfg)
	if err != nil {
		L.Error.Println("Error creating the client:", err)
		return nil, err
	}

	esClient := &ESClient{
		Client: *es,
	}

	return esClient, nil
}

// PostToLogIndex : Adds a log to Elastic Search
func (es *ESClient) PostToLogIndex(sendJSON []byte) error {

	res, err := es.Client.Index(
		logIndexName,                        // Index name
		strings.NewReader(string(sendJSON)), // Document body
		// es.Client.Index.WithDocumentID(),    // Document ID
		es.Client.Index.WithRefresh("true"), // Refresh
	)
	if err != nil {
		L.Error.Println("Error creating index:", err)
		return err
	}

	defer res.Body.Close()
	L.Info.Println("RES:", res)
	return nil
}

// PostToIndex : Adds the marshalled JSON body to an ES Index
func (es *ESClient) PostToIndex(sendJSON []byte) error {

	res, err := es.Client.Index(
		indexName,                           // Index name
		strings.NewReader(string(sendJSON)), // Document body
		es.Client.Index.WithDocumentID("1"), // Document ID
		es.Client.Index.WithRefresh("true"), // Refresh
	)
	if err != nil {
		L.Error.Println("Error creating index:", err)
		return err
	}

	defer res.Body.Close()
	L.Info.Println("RES:", res)
	return nil
}

// MakeArrayForElasticSearch : Puts data in to slices for being marshalled into JSON arrays
func (es *ESClient) MakeArrayForElasticSearch(receivedFiles map[string]string) []string {
	fileSlice := []string{}
	for filename, _ := range receivedFiles {
		fileSlice = append(fileSlice, filename)
	}
	return fileSlice
}
